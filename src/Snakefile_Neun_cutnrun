# -*- coding: utf-8 -*-

# lunarc configuration file
# configuration file with sample list (yaml list)

import os

WD = "/projects/fs3/raquelgg/JGJSeq158_2cutorun/"
RD = "/projects/fs5/jakobssonlab/JGJSeq158_2cutorun/fastq_files/"
configfile: os.path.join(WD, "src/config_files/config.yaml")

SAMPLES = config["samples"]
H3K9ME3 = config["h3k9"]
H3K9ME3_noIgG = config["h3k9_noIgG"]
H3K4ME3 = config["h3k4"]
H3K4ME3_noIgG = config["h3k4_noIgG"]
RNA = config["rna"]
SCRNA_Seq109_11 = config["scrna"]
geneGTF = "/projects/fs3/raquelgg/annotations/hg38/gencode/v38/gencode.v38.annotation.gtf"
bowtie2Index = "/projects/fs1/common/genome/lunarc/indicies/bowtie2/human/hg38/hg38"

# Run as:
# snakemake -j 5 --cluster-config /projects/fs3/raquelgg/JGJSeq158_2cutorun/src/config_files/lunarc_config.json --cluster "sbatch -A {cluster.account} -p {cluster.partition} --tasks-per-node {cluster.tasks-per-node}  -t {cluster.time} -o {cluster.o} -e {cluster.e} -J {cluster.J} -N {cluster.N}" --latency-wait 60

rule all:
    input: 
        os.path.join(WD, "deeptools/plus1kb_SVAs/plus1kb_SVAs.mtx")

rule trim:
    input:
        r1 = os.path.join(RD, "{sample}_R1_001.fastq.gz"),
        r2 = os.path.join(RD, "{sample}_R2_001.fastq.gz")
    output:
        r1 = os.path.join(RD, "trimmed/{sample}_R1_001_TR.fastq.gz"),
        r2 = os.path.join(RD, "trimmed/{sample}_R2_001_TR.fastq.gz")
    params:
        outdir = os.path.join(RD, "trimmed")
    shell:
        """
        ml GCCcore/10.3.0 cutadapt/3.4

        mkdir -p {params.outdir}

        cutadapt -q 10 -a AGATCGGAAGAG -A AGATCGGAAGAG -o {output.r1} -p {output.r2} {input.r1} {input.r2}

        """

rule fastqc:
    input:
        r1 = os.path.join(RD, "trimmed/{sample}_R1_001_TR.fastq.gz"),
        r2 = os.path.join(RD, "trimmed/{sample}_R2_001_TR.fastq.gz")
    output:
        r1 = os.path.join(RD, "trimmed/{sample}_R1_001_TR_fastqc.html"),
        r2 = os.path.join(RD, "trimmed/{sample}_R2_001_TR_fastqc.html")
    shell:
        """
        ml fastqc/0.11.3

        fastqc {input}
        """

rule mapping:
    input:
        r1 = os.path.join(RD, "trimmed/{sample}_R1_001_TR.fastq.gz"),
        r2 = os.path.join(RD, "trimmed/{sample}_R2_001_TR.fastq.gz")
    output:
        os.path.join(WD, "1_mapping/unfiltered/{sample}.sam")
    params:
        index = bowtie2Index
    shell:
        """
        ml GCC/7.3.0-2.30 OpenMPI/3.1.1 Bowtie2/2.3.4.2

        bowtie2 --local --very-sensitive-local --no-unal --no-mixed --no-discordant --phred33 -I 10 -X 700 -x {params.index} -1 {input.r1} -2 {input.r2} -S {output}

        module purge
        """

rule sam_filtering:
    input:
        os.path.join(WD, "1_mapping/unfiltered/{sample}.sam")
    output:
        sam = os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sam"),
        statsU = os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.stats"),
        statsM = os.path.join(WD, "1_mapping/unfiltered/{sample}.orig.stats"),
    shell:
        """
        ml GCC/5.4.0-2.26  OpenMPI/1.10.3
        ml SAMtools/1.4

        # Filter MAPQ >10 to get unique reads
        samtools view -q 10 -h {input} > {output.sam}

        # Stats unique reads
        samtools stats {output.sam} > {output.statsU}

        # Stats all mapped reads
        samtools stats {input} > {output.statsM}
        """

rule sam_to_bam:
    input:
        samU = os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sam"),
        samOrig = os.path.join(WD, "1_mapping/unfiltered/{sample}.sam")
    output:
        bamM = os.path.join(WD, "1_mapping/unfiltered/{sample}.bam"),
        bamU = os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.bam")
    shell: 
        """
        ml GCC/5.4.0-2.26  OpenMPI/1.10.3
        ml SAMtools/1.4
        
        # Convert to bam
        samtools view -Sb {input.samOrig} > {output.bamM}
        samtools view -Sb {input.samU} > {output.bamU}
        """

rule sorting:
    input:
        os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.bam")
    output:
        os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sorted.bam")
    shell:
        """
        ml GCC/7.3.0-2.30 SAMtools/1.9

        samtools sort -o {output} {input}

        module purge
        """

rule indexing:
    input:
        os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sorted.bam")
    output:
        os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sorted.bam.bai")
    shell:
        """
        ml GCC/7.3.0-2.30 SAMtools/1.9

        samtools index -b {input}

        module purge
        """

rule bigwig:
    input:
        os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sorted.bam"),
        os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sorted.bam.bai")
    output:
        os.path.join(WD, "1_mapping/filtered/{sample}.mapq10.sorted.bw")
    shell:
        """
        ml GCC/7.3.0-2.30  OpenMPI/3.1.1 deepTools/2.5.4-Python-3.6.6
        bamCoverage --normalizeUsingRPKM -b {input[0]} -o {output}

        module purge
        """


